CREATE DATABASE MUSIC_STORE;

USE MUSIC_STORE;

CREATE TABLE ALBUM(
ALBUM_ID VARCHAR(100),
TITLE VARCHAR(100),
ARTIST_ID VARCHAR(100)
);

LOAD DATA INFILE
'D:/album.csv'
INTO TABLE ALBUM
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM ALBUM;

CREATE TABLE ARTIST(
ARTIST_ID VARCHAR(100),
NAME VARCHAR(10000)
);

LOAD DATA INFILE
'D:/artist.csv'
INTO TABLE ARTIST
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM ARTIST;

CREATE TABLE CUSTOMER(
CUSTOMER_ID VARCHAR(100),
FIRST_NAME VARCHAR(100),
LAST_NAME VARCHAR(100),
COMPANY VARCHAR(100),
ADDRESS VARCHAR(100),
CITY VARCHAR(100),
STATE VARCHAR(100),
COUNTRY VARCHAR(100),
POSTAL_CODE VARCHAR(100),
PHONE VARCHAR(100),
FAX VARCHAR(100),
EMAIL VARCHAR(100),
SUPPORT_REP_ID VARCHAR(100)
);

LOAD DATA INFILE
'D:/customer.csv'
INTO TABLE CUSTOMER
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM CUSTOMER;

CREATE TABLE EMPLOYEE(
EMPLOYEE_ID VARCHAR(100),
LAST_NAME VARCHAR(100),
FIRST_NAME VARCHAR(100),
TITLE VARCHAR(100),
REPORTS_TO VARCHAR(100),
LEVELS VARCHAR(100),
BIRTHDATE VARCHAR(100),
HIRE_DATE VARCHAR(100),
ADDRESS VARCHAR(100),
CITY VARCHAR(100),
STATE VARCHAR(100),
COUNTRY VARCHAR(100),
POSTAL_CODE VARCHAR(100),
PHONE VARCHAR(100),
FAX VARCHAR(100),
EMAIL VARCHAR(100)
);

LOAD DATA INFILE
'D:/employee.csv'
INTO TABLE EMPLOYEE
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM EMPLOYEE;

CREATE TABLE GENRE(
GENRE_ID VARCHAR(100),
NAME VARCHAR(100)
);

LOAD DATA INFILE
'D:/genre.csv'
INTO TABLE GENRE
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM GENRE;

CREATE TABLE INVOICE(
INVOICE_ID VARCHAR(100),
CUSTOMER_ID VARCHAR(100),
INVOICE_DATE VARCHAR(100),
BILLING_ADDRESS VARCHAR(100),
BILLING_CITY VARCHAR(100),
BILLING_STATE VARCHAR(100),
BILLING_COUNTRY VARCHAR(100),
BILLING_POSTAL_CODE VARCHAR(100),
TOTAL VARCHAR(100)
);

LOAD DATA INFILE
'D:/invoice.csv'
INTO TABLE INVOICE
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM INVOICE;

CREATE TABLE INVOICE_LINE(
INVOICE_LINE_ID VARCHAR(100),
INVOICE_ID VARCHAR(100),
TRACK_ID VARCHAR(100),
UNIT_PRICE VARCHAR(100),
QUANTITY VARCHAR(100)
);

LOAD DATA INFILE
'D:/invoice_line.csv'
INTO TABLE INVOICE_LINE
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM INVOICE_LINE;

CREATE TABLE MEDIA_TYPE(
MEDIA_TYPE_ID VARCHAR(100),
NAME VARCHAR(100)
);

LOAD DATA INFILE
'D:/media_type.csv'
INTO TABLE MEDIA_TYPE
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM MEDIA_TYPE;

CREATE TABLE PLAYLIST(
PLAYLIST_ID VARCHAR(100),
NAME VARCHAR(100)
);

LOAD DATA INFILE
'D:/playlist.csv'
INTO TABLE PLAYLIST
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM PLAYLIST;

CREATE TABLE PLAYLIST_TRACK(
PLAYLIST_ID VARCHAR(100),
TRACK_ID VARCHAR(100)
);

LOAD DATA INFILE
'D:/playlist_track.csv'
INTO TABLE PLAYLIST_TRACK
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM PLAYLIST_TRACK;

CREATE TABLE TRACK(
TRACK_ID VARCHAR(100),
NAME VARCHAR(500),
ALBUM_ID VARCHAR(100),
MEDIA_TYPE_ID VARCHAR(100),
GENRE_ID VARCHAR(100),
COMPOSER VARCHAR(500),
MILLSECONDS VARCHAR(100),
BYTES VARCHAR(100),
UNIT_PRICE VARCHAR(100)
);

LOAD DATA INFILE
'D:/track.csv'
INTO TABLE TRACK
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM TRACK;


## EASY QUESTIONS ##

/* 1. Who is the senior most employee based on job title? */

SELECT TITLE , LAST_NAME , FIRST_NAME, LEVELS 
FROM EMPLOYEE 
ORDER BY LEVELS 
DESC LIMIT 1;

/* 2. Which countries have the most Invoices?*/

SELECT COUNT(*) AS COUNTRY , BILLING_COUNTRY 
FROM INVOICE 
GROUP BY BILLING_COUNTRY 
ORDER BY COUNTRY DESC;
 
/* 3. What are top 3 values of total invoice?*/

SELECT TOTAL 
FROM INVOICE 
ORDER BY TOTAL 
DESC LIMIT 3;
 
/* 4. Which city has the best customers? 
We would like to throw a promotional Music Festival in the city we made the most money. 
Write a query that returns one city that has the highest sum of invoice totals. 
Return both the city name & sum of all invoice totals.*/

SELECT BILLING_CITY , SUM(TOTAL) AS INVOICE_TOTAL 
FROM INVOICE 
GROUP BY BILLING_CITY 
ORDER BY INVOICE_TOTAL 
DESC LIMIT 1;

/* #5 Who is the best customer? 
The customer who has spent the most money will be declared the best customer. 
Write a query that returns the person who has spent the most money.*/

SELECT C.CUSTOMER_ID, SUM(I.TOTAL)
FROM CUSTOMER C
JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
GROUP BY 1
ORDER BY 2 
DESC LIMIT 1;


## MODERATE QUESTIONS ##

/* 1. Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
Return your list ordered alphabetically by email starting with A.*/ 

SELECT C.EMAIL,C.FIRST_NAME,C.LAST_NAME,G.NAME AS GENRE
FROM CUSTOMER C
JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
JOIN INVOICE_LINE IL ON I.INVOICE_ID = IL.INVOICE_ID
JOIN TRACK T ON IL.TRACK_ID = T.TRACK_ID
JOIN GENRE G ON T.GENRE_ID = G.GENRE_ID
WHERE UPPER(G.NAME) LIKE '%ROCK%'
ORDER BY C.EMAIL 
ASC;

/* 2. Let's invite the artists who have written the most rock music in our dataset. 
Write a query that returns the Artist name and total track count of the top 10 rock bands.*/ 

SELECT AR.NAME AS ARTIST_NAME, COUNT(T.TRACK_ID) AS TOTAL_TRACKS
FROM ARTIST AR
JOIN ALBUM AL ON AR.ARTIST_ID = AL.ARTIST_ID
JOIN TRACK T ON AL.ALBUM_ID = T.ALBUM_ID
JOIN GENRE G ON T.GENRE_ID = G.GENRE_ID
WHERE UPPER(G.NAME) LIKE '%ROCK%'
GROUP BY AR.NAME
ORDER BY TOTAL_TRACKS 
DESC LIMIT 10;

/* 3. Return all the track names that have a song length longer than the average song length. 
Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first.*/

SELECT NAME, MILLSECONDS
FROM TRACK
WHERE MILLSECONDS > (SELECT AVG(MILLSECONDS) AS AVG_TRACK_LENGTH FROM TRACK)
ORDER BY MILLSECONDS DESC;



## ADVANCE QUESTIONS ##

/* 1. Find how much amount spent by each customer on artists? 
Write a query to return customer name, artist name and total spent.*/ 

SELECT CU.FIRST_NAME, CU.LAST_NAME, A.NAME AS ARTIST_NAME, SUM(IL.UNIT_PRICE) AS TOTAL_SPENT
FROM INVOICE I
JOIN INVOICE_LINE IL ON I.INVOICE_ID = IL.INVOICE_ID
JOIN TRACK T ON IL.TRACK_ID = T.TRACK_ID
JOIN ALBUM AL ON T.ALBUM_ID = AL.ALBUM_ID
JOIN ARTIST A ON AL.ARTIST_ID = A.ARTIST_ID
JOIN CUSTOMER CU ON I.CUSTOMER_ID = CU.CUSTOMER_ID
GROUP BY CU.CUSTOMER_ID, CU.FIRST_NAME, CU.LAST_NAME, A.NAME
ORDER BY CU.CUSTOMER_ID, TOTAL_SPENT DESC;

/* 2. We want to find out the most popular music Genre for each country. 
We determine the most popular genre as the genre with the highest amount of purchases. 
Write a query that returns each country along with the top Genre. 
For countries where the maximum number of purchases is shared return all Genres.*/

SELECT C.COUNTRY, MAX(G.NAME) AS TOP_GENRE FROM CUSTOMER C
JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
JOIN INVOICE_LINE IL ON I.INVOICE_ID = IL.INVOICE_ID
JOIN TRACK T ON IL.TRACK_ID = T.TRACK_ID
JOIN GENRE G ON T.GENRE_ID = G.GENRE_ID
GROUP BY C.COUNTRY
ORDER BY C.COUNTRY;

/* 3. Write a query that determines the customer that has spent the most on music for each country. 
Write a query that returns the country along with the top customer and how much they spent. 
For countries where the top amount spent is shared, provide all customers who spent this amount.*/

WITH RECURSIVE 
	TBL_CUSTOMTER_WITH_COUNTRY AS (
		SELECT CUSTOMER.CUSTOMER_ID,FIRST_NAME,LAST_NAME,BILLING_COUNTRY,SUM(TOTAL) AS TOTAL_SPENDING
		FROM INVOICE
		JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
		GROUP BY 1,2,3,4
		ORDER BY 2,3 DESC),

	TBL_COUNTRY_MAX_SPENDING AS(
		SELECT BILLING_COUNTRY,MAX(TOTAL_SPENDING) AS MAX_SPENDING
		FROM TBL_CUSTOMTER_WITH_COUNTRY
		GROUP BY BILLING_COUNTRY)

SELECT TBL_CC.BILLING_COUNTRY, TBL_CC.TOTAL_SPENDING,TBL_CC.FIRST_NAME,TBL_CC.LAST_NAME,TBL_CC.CUSTOMER_ID
FROM TBL_CUSTOMTER_WITH_COUNTRY TBL_CC
JOIN TBL_COUNTRY_MAX_SPENDING TBL_MS
ON TBL_CC.BILLING_COUNTRY = TBL_MS.BILLING_COUNTRY
WHERE TBL_CC.TOTAL_SPENDING = TBL_MS.MAX_SPENDING
ORDER BY 1;