CREATE DATABASE ZOMATO;

USE ZOMATO;

CREATE TABLE RESTAURANT(
RESTAURANT_ID VARCHAR(100),
RESTAURANT_NAME VARCHAR(100),
COUNTRY_CODE VARCHAR(100),
CITY VARCHAR(100),
ADDRESS VARCHAR(100),
LOCALITY VARCHAR(100),
LOCALITY_VERBOSE VARCHAR(100),
LONGITUDE VARCHAR(100),
LATITUDE VARCHAR(100),
CUISINES VARCHAR(100),
CURRENCY VARCHAR(100),
HAS_TABLE_BOOKING VARCHAR(100),
HAS_ONLINE_DELIVERY VARCHAR(100),
IS_DELIVERING_NOW VARCHAR(100),
SWITCH_TO_ORDER_MENU VARCHAR(100),
PRICE_RANGE VARCHAR(100),
VOTES VARCHAR(100),
AVERAGE_COST_FOR_TWO VARCHAR(100),
RATING VARCHAR(100),
DATEKEY_OPENING VARCHAR(100),
CUISINES_1 VARCHAR(100),
CUISINES_2 VARCHAR(100),
CUISINES_3 VARCHAR(100),
CUISINES_4 VARCHAR(100),
CUISINES_5 VARCHAR(100),
CUISINES_6 VARCHAR(100),
CUISINES_7 VARCHAR(100),
CUISINES_8 VARCHAR(100)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4;

SET SESSION SQL_MODE = '';

LOAD DATA INFILE
'D:/Restaurant.csv'
INTO TABLE RESTAURANT
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM RESTAURANT;

CREATE TABLE COUNTRY(
COUNTRY_ID VARCHAR(100),
COUNTRY_NAME VARCHAR(100)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4;

SET SESSION SQL_MODE = '';

LOAD DATA INFILE
'D:/Country.csv'
INTO TABLE COUNTRY
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM COUNTRY;

UPDATE RESTAURANT 
SET DATEKEY_OPENING = REPLACE(DATEKEY_OPENING, '_', '/') 
WHERE DATEKEY_OPENING 
LIKE '%_%';

ALTER TABLE RESTAURANT 
MODIFY COLUMN DATEKEY_OPENING 
DATE;

SELECT * 
FROM RESTAURANT;

/* #1. Build a Calendar Table using the Column Datekey.
      Add all the below Columns in the Calendar Table using the Formulas.
A.Year
B.Monthno
C.Monthfullname
D.Quarter(Q1,Q2,Q3,Q4)
E. YearMonth ( YYYY-MMM)
F. Weekdayno
G.Weekdayname
H.FinancialMOnth ( April = FM1, May= FM2  â€¦. March = FM12)
I. Financial Quarter ( Quarters based on Financial Month) */

SELECT YEAR(DATEKEY_OPENING) YEARS,
MONTH(DATEKEY_OPENING) MONTHS,
DAY(DATEKEY_OPENING) DAY,
MONTHNAME(DATEKEY_OPENING) MONTHNAME,
QUARTER(DATEKEY_OPENING)AS QUARTER,
CONCAT(YEAR(DATEKEY_OPENING),'-',MONTHNAME(DATEKEY_OPENING)) YEARMONTH, 
WEEKDAY(DATEKEY_OPENING) WEEKDAY,
DAYNAME(DATEKEY_OPENING)DAYNAME, 
CASE WHEN MONTHNAME(DATEKEY_OPENING) IN ('JANUARY' ,'FEBRUARY' ,'MARCH' )THEN 'Q1'
WHEN MONTHNAME(DATEKEY_OPENING) IN ('APRIL' ,'MAY' ,'JUNE' )THEN 'Q2'
WHEN MONTHNAME(DATEKEY_OPENING) IN ('JULY' ,'AUGUST' ,'SEPTEMBER' )THEN 'Q3'
ELSE  'Q4' END AS QUARTERS,
CASE WHEN MONTHNAME(DATEKEY_OPENING)='JANUARY' THEN 'FM10' 
WHEN MONTHNAME(DATEKEY_OPENING)='JANUARY' THEN 'FM11'
WHEN MONTHNAME(DATEKEY_OPENING)='FEBRUARY' THEN 'FM12'
WHEN MONTHNAME(DATEKEY_OPENING)='MARCH' THEN 'FM1'
WHEN MONTHNAME(DATEKEY_OPENING)='APRIL'THEN'FM2'
WHEN MONTHNAME(DATEKEY_OPENING)='MAY' THEN 'FM3'
WHEN MONTHNAME(DATEKEY_OPENING)='JUNE' THEN 'FM4'
WHEN MONTHNAME(DATEKEY_OPENING)='JULY' THEN 'FM5'
WHEN MONTHNAME(DATEKEY_OPENING)='AUGUST' THEN 'FM6'
WHEN MONTHNAME(DATEKEY_OPENING)='SEPTEMBER' THEN 'FM7'
WHEN MONTHNAME(DATEKEY_OPENING)='OCTOBER' THEN 'FM8'
WHEN MONTHNAME(DATEKEY_OPENING)='NOVEMBER' THEN 'FM9'
WHEN MONTHNAME(DATEKEY_OPENING)='DECEMBER'THEN 'FM10'
END FINANCIAL_MONTHS,
CASE WHEN MONTHNAME(DATEKEY_OPENING) IN ('JANUARY' ,'FEBRUARY' ,'MARCH' )THEN 'Q4'
WHEN MONTHNAME(DATEKEY_OPENING) IN ('APRIL' ,'MAY' ,'JUNE' )THEN 'Q1'
WHEN MONTHNAME(DATEKEY_OPENING) IN ('JULY' ,'AUGUST' ,'SEPTEMBER' )THEN 'Q2'
ELSE  'Q3' END AS FINANCIAL_QUARTERS
FROM RESTAURANT;

#2. Find the number of restaurants based on city and country.

SELECT COUNTRY.COUNTRY_NAME, RESTAURANT.CITY, COUNT(RESTAURANT_ID) NO_OF_RESTAURANTS
FROM RESTAURANT 
INNER JOIN COUNTRY 
ON RESTAURANT.COUNTRY_CODE=COUNTRY.COUNTRY_ID 
GROUP BY COUNTRY.COUNTRY_NAME, RESTAURANT.CITY;

#3. Numbers of Restaurants opening based on year, quarter, month.

SELECT YEAR(DATEKEY_OPENING)YEAR, QUARTER(DATEKEY_OPENING)QUARTER, MONTHNAME(DATEKEY_OPENING)MONTHNAME, COUNT(RESTAURANT_ID)
AS NO_OF_RESTAURANTS 
FROM RESTAURANT 
GROUP BY YEAR(DATEKEY_OPENING), QUARTER(DATEKEY_OPENING), MONTHNAME(DATEKEY_OPENING) 
ORDER BY YEAR(DATEKEY_OPENING), QUARTER(DATEKEY_OPENING), MONTHNAME(DATEKEY_OPENING);

#4. Count of restaurants based on average ratings.

SELECT CASE 
WHEN RATING <=2 THEN "0-2" 
WHEN RATING <=3 THEN "2-3" 
WHEN RATING <=4 THEN "3-4" 
WHEN RATING<=5 THEN "4-5" 
END RATING_RANGE,COUNT(RESTAURANT_ID) 
FROM RESTAURANT 
GROUP BY RATING_RANGE 
ORDER BY RATING_RANGE;

#5. Create buckets based on average price of reasonable size and find out how many restaurants falls in each buckets.

SELECT CASE 
WHEN PRICE_RANGE=1 THEN "0-500" 
WHEN PRICE_RANGE=2 THEN "500-3000" 
WHEN PRICE_RANGE=3 THEN "3000-10000" 
WHEN PRICE_RANGE=4 THEN ">10000" 
END PRICE_RANGE,COUNT(RESTAURANT_ID)
FROM RESTAURANT 
GROUP BY PRICE_RANGE
ORDER BY PRICE_RANGE;

#6. Percentage of restaurants based on "Has_Table_booking".

SELECT HAS_TABLE_BOOKING, CONCAT(ROUND(COUNT(HAS_TABLE_BOOKING)/100,1),"%") PERCENTAGE 
FROM RESTAURANT 
GROUP BY HAS_TABLE_BOOKING;

#7. Percentage of restaurants based on "Has_Online_delivery".

SELECT HAS_ONLINE_DELIVERY, CONCAT(ROUND(COUNT(HAS_ONLINE_DELIVERY)/100,1),"%") PERCENTAGE 
FROM RESTAURANT 
GROUP BY HAS_ONLINE_DELIVERY;

# HIGHEST RATING RESTAURANTS IN EACH COUNTRY
 
SELECT COUNTRY_NAME, RESTAURANT_NAME, MAX(RATING)HIGHEST_RATING 
FROM RESTAURANT 
INNER JOIN COUNTRY
ON RESTAURANT.COUNTRY_CODE=COUNTRY.COUNTRY_ID
GROUP BY COUNTRY.COUNTRY_NAME;

# TOP 5 RESTAURANTS WHO HAS MORE NUMBER OF VOTES

SELECT COUNTRY_NAME, RESTAURANT_NAME, VOTES, AVERAGE_COST_FOR_TWO 
FROM RESTAURANT 
INNER JOIN COUNTRY 
ON RESTAURANT.COUNTRY_CODE=COUNTRY.COUNTRY_ID
GROUP BY COUNTRY.COUNTRY_NAME, RESTAURANT_NAME, VOTES, AVERAGE_COST_FOR_TWO
ORDER BY VOTES 
DESC LIMIT 5;

# TOP RESTAURANT WITH HIGHEST RATING AND VOTES FROM EACH COUNTRY

SELECT COUNTRY_NAME, RESTAURANT_NAME, MAX(RATING)HIGHEST_RATING, MAX(VOTES) 
FROM RESTAURANT 
INNER JOIN COUNTRY 
ON RESTAURANT.COUNTRY_CODE=COUNTRY.COUNTRY_ID
GROUP BY COUNTRY_NAME 
ORDER BY MAX(VOTES) 
DESC LIMIT 5;

SELECT SUBSTRING_INDEX(CUISINES, ',',1) 
AS SPLIT
FROM RESTAURANT;

SELECT RESTAURANT_NAME, CUISINES,SUBSTRING_INDEX(CUISINES, ',',1) 
AS SPLIT, SUBSTRING_INDEX(CUISINES, ',',2) 
AS SPLIT, SUBSTRING_INDEX(CUISINES, ',',1) 
FROM RESTAURANT;

SELECT RESTAURANT_NAME, CUISINES, 
SUBSTRING_INDEX(CUISINES, ',', 1) AS CUISINE_1,
SUBSTRING_INDEX(SUBSTRING_INDEX(CUISINES, ',', 2), ',', -1) AS CUISINE_2,
SUBSTRING_INDEX(SUBSTRING_INDEX(CUISINES, ',', 3), ',', -1) AS CUISINE_3
FROM RESTAURANT;
